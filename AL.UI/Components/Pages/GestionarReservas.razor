@page "/gestionreservas"
@rendermode InteractiveServer
@inject GestionarReservasCasoDeUso GestionarReservasUseCase
@inject IServicioSesion ServicioSesion
@inject IUsuarioRepositorio UsuarioRepositorio
@inject NavigationManager NavigationManager
@inject IAlojamientoRepositorio AlojamientoRepositorio

<h3>Gestión de Reservas</h3>

@if (reservas.Count == 0)
{
    <p>No hay reservas aún.</p>
}
else
{
    @foreach (var reserva in reservas) //*corregir boton para ver la informacion de los inquilinos*//
    {
        <div class="card p-3 my-3">
            @if (!infoUsuarios[reserva.IdUsuario].Eliminado)
            {
                <p><strong>Usuario:</strong> @infoUsuarios[reserva.IdUsuario].NombreCompleto</p>
                <p><strong>ID:</strong> @reserva.IdUsuario</p>
            }
            else
            {
                <p>@infoUsuarios[reserva.IdUsuario].NombreCompleto</p>
            }
            <p><strong>Alojamiento:</strong> @nombresAlojamientos[reserva.IdAlojamiento]</p>
            <p><strong>Desde:</strong> @reserva.FechaInicioEstadia.ToShortDateString()</p>
            <p><strong>Hasta:</strong> @reserva.FechaFinEstadia.ToShortDateString()</p>
            <p><strong>Monto:</strong> $@reserva.MontoEstadia</p>
            <p><strong>Estado:</strong> @reserva.EstadoReserva</p>

           @if (reserva.EstadoReserva == EstadoReserva.Pendiente)
            {
            <div class="d-flex justify-content-start gap-2 mt-2">
                <button class="btn btn-success btn-sm" style="width: auto; min-width: 90px;" @onclick="() => Aceptar(reserva.Id)">
                    Aceptar
                </button>
                <button class="btn btn-danger btn-sm" style="width: auto; min-width: 90px;" @onclick="() => Rechazar(reserva.Id)">
                    Rechazar
                </button>
            </div>
            }
            else if (reserva.EstadoReserva ==EstadoReserva.Confirmada)
            {
            <div class="mt-2">
                <span class="badge rounded-pill bg-success text-white px-3 py-2" style="font-size: 0.9rem;">
                    ✔ Confirmada
                </span>
            </div>
            }
            else if (reserva.EstadoReserva == EstadoReserva.Rechazada)
            {
            <div class="mt-2">
                <span class="badge rounded-pill bg-danger text-white px-3 py-2" style="font-size: 0.9rem;">
                    ✖ Rechazada
                </span>
            </div>
            }
            <div class="d-flex gap-2 mt-3">
                @if (reserva.ListaInformacionAdicional.Count > 0 && !infoUsuarios[reserva.IdUsuario].Eliminado)
                {
                    <button class="btn btn-outline-primary btn-sm" @onclick="() => VerInformacionAdicional(reserva.Id)">
                        Ver Información Adicional
                    </button>
                }

            @if (reserva.Inquilinos?.Count > 0 && !infoUsuarios[reserva.IdUsuario].Eliminado)
            {
                <button class="btn btn-outline-secondary btn-sm" @onclick="() => VerInquilinos(reserva.Id)">
                    Ver Inquilinos
                </button>
            }
        </div>

            @if (mostrarInformacionAdicional && reservaSeleccionada?.Id == reserva.Id)
            {
                <div class="card p-3 my-3 bg-light border-primary">
                    <h5>Información Adicional (Fotos)</h5>
                    @if (reservaSeleccionada.ListaInformacionAdicional.Any())
                    {
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var foto in reservaSeleccionada.ListaInformacionAdicional)
                            {
                                <img src="@foto" alt="Foto adicional" width="150" class="img-thumbnail" />
                            }
                        </div>
                    }
                    else
                    {
                        <p>No hay información adicional disponible.</p>
                    }
                </div>
            }

            @if (mostrarInquilinos && reservaSeleccionada?.Id == reserva.Id)
            {
                <div class="card p-3 my-3 bg-light border-secondary">
                    <h5>Información de Inquilinos</h5>
                    <ul class="list-group">
                        @foreach (var inquilino in reservaSeleccionada.Inquilinos)
                        {
                            <li class="list-group-item">
                                <strong>Nombre:</strong> @inquilino.Nombre<br />
                                <strong>Documento:</strong> @inquilino.Dni
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    }
}

@code {
    List<Reserva> reservas = new();
    //string mensajeEstado = "";
    Reserva? reservaSeleccionada = null;
    bool mostrarInformacionAdicional = false;
    bool mostrarInquilinos = false;
    Dictionary<int, (string NombreCompleto, bool Eliminado)> infoUsuarios = new();
    Dictionary<int, string> nombresAlojamientos = new();


    void VerInformacionAdicional(int id)
    {
        reservaSeleccionada = reservas.FirstOrDefault(r => r.Id == id);
        mostrarInformacionAdicional = true;
        mostrarInquilinos = false;
    }

    void VerInquilinos(int id)
    {
        reservaSeleccionada = reservas.FirstOrDefault(r => r.Id == id);
        mostrarInquilinos = true;
        mostrarInformacionAdicional = false;
    }

    protected override void OnInitialized()
    {
        ServicioSesion.IniciarSesion();
        reservas = GestionarReservasUseCase.ObtenerTodas();
        var idsUsuarios = reservas.Select(r => r.IdUsuario).Distinct().ToList();

        foreach (var id in idsUsuarios)
        {
            var usuario = UsuarioRepositorio.ObtenerPorId(id);
            if (usuario is not null)
            {
                string nombre = usuario.EstaHabilitado
                    ? $"{usuario.Nombre} {usuario.Apellido}"
                    : "Usuario No disponible";

                infoUsuarios[id] = (nombre, !usuario.EstaHabilitado);
            }
            else
            {
                infoUsuarios[id] = ("Usuario No disponible", true);
            }
        }
        var idsAlojamientos = reservas.Select(r => r.IdAlojamiento).Distinct().ToList();
        foreach (var id in idsAlojamientos)
        {
            var alojamiento = AlojamientoRepositorio.ObtenerPorId(id).Result; // como es async
            if (alojamiento is not null)
            {
                nombresAlojamientos[id] = alojamiento.Nombre;
            }
            else
            {
                nombresAlojamientos[id] = "Alojamiento desconocido";
            }
        }
    }
    void Aceptar(int id)
    {
        GestionarReservasUseCase.AceptarReserva(id);
        reservas = GestionarReservasUseCase.ObtenerTodas();
        StateHasChanged();
    }

    void Rechazar(int id)
    {
        GestionarReservasUseCase.RechazarReserva(id);
        reservas = GestionarReservasUseCase.ObtenerTodas();
        StateHasChanged();
    }
}