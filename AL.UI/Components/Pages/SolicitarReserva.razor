@page "/SolicitarReserva/{AlojamientoId:int}"
@inject IAlojamientoRepositorio alojamientoRepositorio
@inject IUsuarioRepositorio UsuarioRepositorio
@inject IServicioSesion servicioSesion
@inject ReservaAlta reservaAlta
@inject NavigationManager NavigationManager
@using AL.UI.Servicios
@implements IDisposable

@rendermode InteractiveServer


<h3>Solicitar Reserva</h3>

@if (alojamiento == null)
{
    <p>Cargando alojamiento...</p>
}
else
{
    <div class="row">
        <!-- COLUMNA IZQUIERDA: formulario -->
        <div class="col-md-7">
            <h4>Reservar: @alojamiento.Nombre</h4>

            <EditForm Model="reserva" OnValidSubmit="ProcesarReserva">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- adultos -->
                <div class="mb-3">
                    <label>Cantidad de adultos:</label>
                    <InputNumber @bind-Value="reserva.CantidadDeAdultos" class="form-control" />
                </div>

                <!-- niños -->
                <div class="mb-3">
                    <label>Cantidad de niños:</label>
                    <InputNumber @bind-Value="reserva.CantidadDeNiños" class="form-control" />
                </div>

                <!-- info adicional -->
                @if (alojamiento.TieneInformacionAdicional)
                {
                    <div class="mt-3 p-3 border rounded bg-light"> 
                        <p><strong>Información adicional requerida:</strong> @alojamiento.InformacionAdicional</p>
                        <label>Subí las imágenes correspondientes:</label>
                        <InputFile OnChange="OnInputFileChange" multiple accept="image/*" />
                        @if (imagenesSubidas.Count > 0)
                        {
                            <p>Imágenes seleccionadas:</p>
                            <ul>
                                @foreach (var img in imagenesSubidas)
                                {
                                    <li>@img.Name (@(img.Size / 1024) KB)</li>
                                }
                            </ul>
                        }
                    </div>
                }

                <!-- info inquilinos -->
                @if (mostrarInfoInquilinos && reserva.Inquilinos != null && reserva.Inquilinos.All(i => i != null))
                {
                    <div class="alert alert-warning mt-3">
                        <p>Ingresá los datos de los inquilinos (Nombre y DNI):</p>

                        @for (int i = 0; i < reserva.Inquilinos.Count; i++)
                        {
                            var inquilino = reserva.Inquilinos[i];
                            if (inquilino == null)
                            {
                                continue; // evita intentar renderizar nulos
                            }
                            <div class="mb-3 border rounded p-2 bg-light">
                                <label><strong>Inquilino @(i + 1)</strong></label>
                                <InputText @bind-Value="inquilino.Nombre" class="form-control mb-2" placeholder="Nombre completo" />
                                <InputText @bind-Value="inquilino.Dni" class="form-control" placeholder="DNI" />
                            </div>
                        }
                    </div>
                }
                <!-- boton de reservar -->
                <div class="mt-3">
                    <button type="submit" class="btn btn-primary">Reservar</button>
                </div>
            </EditForm>

            @if (!string.IsNullOrWhiteSpace(mensaje))
            {
                <div class="alert alert-info mt-3">@mensaje</div>
            }
        </div>

        <!-- COLUMNA DERECHA: tarjeta resumen -->
        <div class="col-md-5">
            <div class="card">
                <div class="card-body">
                    <h5>
                        Resumen del Alojamiento: <span class="fw-bold">@alojamiento.Nombre</span>
                    </h5>
                    <p>
                        <strong>Desde:</strong> @desde?.ToString("dd/MM/yyyy") &nbsp;&nbsp;
                        <strong>Hasta:</strong> @hasta?.ToString("dd/MM/yyyy")
                    </p>
                    <p><strong>Ubicación:</strong> @alojamiento.Ciudad</p>
                    <p><strong>Capacidad máxima:</strong> @alojamiento.CapacidadMaxima</p>
                    <p><strong>Precio por noche:</strong> $@alojamiento.PrecioPorNoche</p>
                    <p><strong>Noches:</strong> @((hasta - desde)?.Days)</p>
                    <hr />
                    <h5 class="text-success">Total estimado: $@CalcularTotal()</h5>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int AlojamientoId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public DateTime? desde { get; set; } 

    [Parameter]
    [SupplyParameterFromQuery]
    public DateTime? hasta { get; set; }

    private Alojamiento? alojamiento=new();
    private Reserva reserva = new();
    private string mensaje = "";
    private List<IBrowserFile> imagenesSubidas = new();
    private bool mostrarInfoInquilinos = false;

    private bool IsLoggedIn = false;
    private Usuario usuario=null!;
    private void OnInputFileChange(InputFileChangeEventArgs e)
        {
            imagenesSubidas = e.GetMultipleFiles().ToList();
        }
    protected override async Task OnInitializedAsync()
    {
        alojamiento = await alojamientoRepositorio.ObtenerPorId(AlojamientoId);
        if (alojamiento == null)
        {
            Console.WriteLine(AlojamientoId);
            mensaje = "Alojamiento no encontrado.";
            return;
        }
       
        reserva.IdAlojamiento = alojamiento.Id;
        reserva.Inquilinos = new List<Inquilino>(); // evita null
        reserva.FechaInicioEstadia = desde ?? DateTime.Now;
        reserva.FechaFinEstadia = hasta ?? DateTime.Now.AddDays(1);
    }
    private bool _isDisposed = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !IsLoggedIn && !_isDisposed)
        {
            await servicioSesion.InicializarUsuarioAsync();
            if(servicioSesion.Usuario!=null){
              usuario = servicioSesion.Usuario;
              servicioSesion.IniciarSesion();
            } 
            IsLoggedIn = true;
            if (!_isDisposed)
                StateHasChanged();
        }

    }
    public void Dispose()
    {
        _isDisposed = true;
    }
    private double CalcularTotal()
    {
        if (alojamiento == null || !desde.HasValue || !hasta.HasValue)
            return 0;

        int dias = (hasta.Value - desde.Value).Days;
        reserva.MontoEstadia=dias * alojamiento.PrecioPorNoche;
        return dias > 0 ? dias * alojamiento.PrecioPorNoche : 0;
    }

    private async Task ProcesarReserva()
    {
        try
        {
            await servicioSesion.InicializarUsuarioAsync();
            reserva.IdUsuario = servicioSesion.Id;
            if (!desde.HasValue || !hasta.HasValue || !alojamientoRepositorio.alojamientoDisponible(AlojamientoId, desde.Value, hasta.Value))
            {
                mensaje = "Alojamiento no disponible en las fechas seleccionadas.";
                return;
            }
            if (alojamiento?.TieneInformacionAdicional == true && imagenesSubidas.Count > 0)
            {
                // Crear lista de rutas de archivos (string)
                
                string _rutaBase = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "imagenes", "reservas");
                foreach (var archivo in imagenesSubidas)
                {
                    var nombreUnico = $"{Guid.NewGuid()}_{archivo.Name}";
                    var rutaCompleta = Path.Combine(_rutaBase, nombreUnico);

                    await using var stream = new FileStream(rutaCompleta, FileMode.Create);
                    await archivo.OpenReadStream(10 * 1024 * 1024).CopyToAsync(stream); // max 10MB

                    // Retorna la ruta relativa para usar en la UI
                    var ruta= $"/imagenes/reservas/{nombreUnico}";
                    reserva.ListaInformacionAdicional.Add(ruta);
                }
            }
            if (UsuarioRepositorio.tieneReservasSolapadas(reserva.FechaInicioEstadia, reserva.FechaFinEstadia, servicioSesion.Id))
            {
                int total = (reserva.CantidadDeAdultos ?? 0) + (reserva.CantidadDeNiños ?? 0);

                if (!mostrarInfoInquilinos)
                {
                    reserva.Inquilinos = Enumerable.Range(0, total).Select(_ => new Inquilino()).ToList();
                    mostrarInfoInquilinos = true;
                    mensaje = "Debe ingresar los datos de los inquilinos para continuar.";
                    StateHasChanged();
                    return;
                }

                // Validación
                if (reserva.Inquilinos.Any(i => string.IsNullOrWhiteSpace(i.Nombre) || string.IsNullOrWhiteSpace(i.Dni)))
                {
                    mensaje = "Todos los campos de nombre y DNI deben estar completos.";
                    return;
                }
                reserva.InformacionInquilinos = System.Text.Json.JsonSerializer.Serialize(reserva.Inquilinos);
            }

            // Validar datos
            mensaje = await reservaAlta.Ejecutar(reserva);
        }
        catch (Exception ex)
        {
            mensaje = $"No pudimos procesar la reserva: {ex.Message}";
        }

    }
}
